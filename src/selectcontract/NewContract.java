/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package selectcontract;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.swing.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.*;

/**
 * @author wenlong
 */
public class NewContract extends javax.swing.JDialog {

    private final Contract newContract;
    public ContractModel theModel;
    public static String newContractSave = System.getProperty("user.dir") + "\\src\\selectcontract\\contracts.txt";
    public static String newContractSaveXML = System.getProperty("user.dir") + "\\src\\selectcontract\\contracts.xml";
    private final String initial = "null";
    public static boolean isUpdate = false;

    /**
     * Creates new form NewContract
     */
    public NewContract(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
//        newContractSave = System.getProperty("user.dir") + "\\src\\selectcontract\\contracts.txt";
        this.newContract = new Contract(initial, initial, initial, initial);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        orderID = new javax.swing.JTextField();
        orderITEM = new javax.swing.JTextField();
        oCITY = new javax.swing.JComboBox<>();
        dCITY = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        resetBTN = new javax.swing.JButton();
        saveBTN = new javax.swing.JButton();
        cancelBTN = new javax.swing.JButton();
        CheckBeforeSave = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("orderID");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("orderItem");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("destCity");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("originCity");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                                .addGap(36, 36, 36)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                                .addContainerGap())
        );

        orderID.setToolTipText("orderID format:[1-9][a-zA-Z]{3}");
        orderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIDActionPerformed(evt);
            }
        });

        orderITEM.setToolTipText("order item shouldn't be all digits or empty");

        oCITY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Victoria", "Vancouver", "Seattle", "Nanaimo", "Prince George"}));
        oCITY.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                oCITYItemStateChanged(evt);
            }
        });
        oCITY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oCITYActionPerformed(evt);
            }
        });

        dCITY.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Victoria", "Vancouver", "Seattle", "Nanaimo", "Prince George"}));
        dCITY.setToolTipText("should be same with origin city");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(orderID)
                                        .addComponent(orderITEM)
                                        .addComponent(oCITY, 0, 211, Short.MAX_VALUE)
                                        .addComponent(dCITY, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(orderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(oCITY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dCITY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(orderITEM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        resetBTN.setBackground(new java.awt.Color(255, 51, 102));
        resetBTN.setText("RESET");
        resetBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBTNActionPerformed(evt);
            }
        });

        saveBTN.setText("SAVE");
        saveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBTNActionPerformed(evt);
            }
        });

        cancelBTN.setText("CANCEL");
        cancelBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(resetBTN)
                                .addGap(35, 35, 35)
                                .addComponent(cancelBTN)
                                .addGap(18, 18, 18)
                                .addComponent(saveBTN)
                                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(saveBTN)
                                        .addComponent(cancelBTN)
                                        .addComponent(resetBTN))
                                .addContainerGap())
        );

        CheckBeforeSave.setText("Check:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(CheckBeforeSave, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(47, 47, 47))))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addComponent(CheckBeforeSave, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(184, 184, 184))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeContractToXML(String contractID, String originCity, String destCity, String orderItem) {
        try {
            File inputFile = new File(newContractSaveXML);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(inputFile);

            Element rootElement = doc.getDocumentElement();

            Element contract = doc.createElement("contract");
            rootElement.appendChild(contract);

            Element contractId = doc.createElement("contractID");
            contractId.appendChild(doc.createTextNode(contractID));
            contract.appendChild(contractId);

            Element originElement = doc.createElement("originCity");
            originElement.appendChild(doc.createTextNode(originCity));
            contract.appendChild(originElement);

            Element destinationElement = doc.createElement("destCity");
            destinationElement.appendChild(doc.createTextNode(destCity));
            contract.appendChild(destinationElement);

            Element itemElement = doc.createElement("orderItem");
            itemElement.appendChild(doc.createTextNode(orderItem));
            contract.appendChild(itemElement);
            isUpdate = true;

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            transformer.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(newContractSaveXML)));


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void saveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBTNActionPerformed
//        while (!this.newContract.getChecker().contains("pass")) {
        try {
            CheckBeforeSave.setText("start");
            String oid = orderID.getText().toUpperCase();
//            System.out.println("orderID.getText().isBlank() ?" + orderID.getText() + "? < t/f  " + orderID.getText().isBlank());
            if (orderID.getText().isBlank()) {
                System.out.println("orderID.getText() is empty");
                CheckBeforeSave.setText("orderID is blank");
                return;
            } else if (!oid.matches("[1-9][a-zA-Z]{3}")) {
                CheckBeforeSave.setText("invalid orderID format:[1-9][a-zA-Z]{3}");
                return;
            } else {
                CheckBeforeSave.setText("valid order id");
            }
            this.newContract.getOrderIdList();
            boolean idISduplicated = this.newContract.orderidList.contains(oid);
            if (idISduplicated) {
                CheckBeforeSave.setText("orderID is duplicated");
                return;
            } else {
                this.newContract.setContractID(orderID.getText().toUpperCase());
            }

            String oc = (String) oCITY.getSelectedItem();
            String dc = (String) dCITY.getSelectedItem();
//            saveBTN.setToolTipText(this.newContract.getChecker());
            if (oc.equals(dc)) {
                CheckBeforeSave.setText("destCity euals ocity ,recheck");
                return;
            }
            this.newContract.setOriginCity(oc);
//            saveBTN.setToolTipText(this.newContract.getChecker());

            this.newContract.setDestCity(dc);

            String it = orderITEM.getText();
            if (oid.isBlank() || it.isBlank()) {
                CheckBeforeSave.setText("orderID or order item is blank");
                return;
            }
            //if (orderItem.matches("\\d+")
            if (it.matches("\\d+")) {
                CheckBeforeSave.setText("order item should't be all digits");
                return;
            }
            this.newContract.setOrderItem(orderITEM.getText());
            if (this.newContract.getContractID().contains(initial) || this.newContract.getContractID().isBlank()) {
                return;
            }
            if (this.newContract.getOriginCity().contains(initial) || this.newContract.getOriginCity().isBlank()) {
                return;
            }
            if (this.newContract.getDestCity().contains(initial) || newContract.getDestCity().isBlank()) {
                return;
            }
            if (newContract.getOrderItem().contains(initial) || this.newContract.getOrderItem().isBlank()) {
                return;
            }
            String str = null;
            System.out.println("before str check empty: id.isBlank()||it.isBlank() " + (oid.isBlank() || it.isBlank()));
            str = this.newContract.getContractID() + "," + this.newContract.getOriginCity() + "," + this.newContract.getDestCity() + "," + this.newContract.getOrderItem();
            CheckBeforeSave.setText(str);
            if (str.contains(initial) || str == null || str.isBlank() || str.isEmpty()) {
                return;
            }
            writeContractToXML(oid, oc, dc, it);
            BufferedWriter newWrite = new BufferedWriter(new FileWriter(newContractSave, true));
            newWrite.write(str);
            resetBTN.doClick();
            newWrite.newLine();
            newWrite.close();
            String str2 = "new contract : " + str + "has been saved successfully";
            JOptionPane.showMessageDialog(null, str2);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
//    }
//GEN-LAST:event_saveBTNActionPerformed

    private void resetBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBTNActionPerformed
        this.orderITEM.setText("");
        this.orderID.setText("");
        this.oCITY.setSelectedIndex(0);
        this.dCITY.setSelectedIndex(0);
    }//GEN-LAST:event_resetBTNActionPerformed

    private void cancelBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBTNActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelBTNActionPerformed

    private void orderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderIDActionPerformed

    private void oCITYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oCITYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oCITYActionPerformed

    private void oCITYItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_oCITYItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_oCITYItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewContract dialog = new NewContract(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CheckBeforeSave;
    private javax.swing.JButton cancelBTN;
    private javax.swing.JComboBox<String> dCITY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JComboBox<String> oCITY;
    private javax.swing.JTextField orderID;
    private javax.swing.JTextField orderITEM;
    private javax.swing.JButton resetBTN;
    private javax.swing.JButton saveBTN;
    // End of variables declaration//GEN-END:variables
}
